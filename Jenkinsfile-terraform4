pipeline {
    agent any

    parameters {
        choice(name: 'TERRAFORM_ACTION', choices: ['apply', 'destroy'], description: 'Select Terraform action to perform')
    }
    
    environment {
        // Set Azure credentials
        AZURE_USERNAME = credentials('lil-sp-client-id')
        AZURE_PASSWORD = credentials('lil-sp-client-secret-id')
    }

    stages {
        stage('Azure Login') {
            steps {
                script {
                    // Set Azure credentials using environment variables
                    withCredentials([usernamePassword(credentialsId: 'lilip-acr-credentials-id', usernameVariable: 'SERVICE_PRINCIPAL_ID', passwordVariable: 'SERVICE_PRINCIPAL_PASSWORD')]) {
                        sh 'az login --service-principal -u $SERVICE_PRINCIPAL_ID -p $SERVICE_PRINCIPAL_PASSWORD --tenant 98932122-35ff-47e5-a539-0942b55eb83c'
                    }
                }
            }
        }
        
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/lily4499/acr-aks-terraform.git'
            }
        }

        stage('Terraform Init') {
            steps {
                script {
                    sh 'terraform init -input=false'
                }
            }
        }

        stage('Terraform Action') {
            steps {
                script {
                    if (params.TERRAFORM_ACTION == 'apply') {
                        sh 'terraform apply -auto-approve'
                    } else if (params.TERRAFORM_ACTION == 'destroy') {
                        sh 'terraform destroy -auto-approve'
                    } else {
                        error 'Invalid Terraform action specified!'
                    }
                }
            }
        }
        
        stage('Trigger Jenkins Job to Push Docker Image to ACR') {
            steps {
                script {
                    // Trigger another Jenkins job to create ACR and AKS
                    build job: 'push-image-acr', wait: false
                }
            }
        }
    }
}
